{"version":3,"sources":["Loading.js","Movie.js","Movies.js","App.js","index.js"],"names":["Loading","className","Movie","id","poster_path","title","vote_average","overview","removeMovie","useState","readMore","setReadMore","src","alt","length","substring","onClick","Movies","movies","console","log","map","movie","api_popular","App","loading","setLoading","setMovies","fetchMovies","a","fetch","response","json","respData","results","useEffect","newMovies","filter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAUeA,EARC,WACd,OACE,qBAAKC,UAAU,UAAf,SACE,+C,OCmCSC,EArCD,SAAC,GAOR,IANLC,EAMI,EANJA,GACAC,EAKI,EALJA,YACAC,EAII,EAJJA,MACAC,EAGI,EAHJA,aACAC,EAEI,EAFJA,SACAC,EACI,EADJA,YAEA,EAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,OACE,0BAASV,UAAU,eAAnB,UACE,qBAAKW,IAbK,mCAaUR,EAAaS,IAAKR,IACtC,mCACE,sBAAKJ,UAAU,aAAf,UACE,6BAAKI,IACL,oBAAIJ,UAAU,aAAd,SAA4BK,OAE9B,8BACGC,EAASO,OAAS,IACfJ,EACEH,EADM,UAEHA,EAASQ,UAAU,EAAG,KAFnB,OAGRR,EACHA,EAASO,OAAS,KACjB,wBAAQE,QAAS,kBAAML,GAAaD,IAApC,SACGA,EAAW,YAAc,mBAIhC,wBAAQT,UAAU,aAAae,QAAS,kBAAMR,EAAYL,IAA1D,mCCXOc,EAnBA,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,OAAQV,EAAkB,EAAlBA,YAIxB,OAFEW,QAAQC,IAAIF,GAGZ,oCACE,sBAAKjB,UAAU,QAAf,UACE,+BAAKiB,EAAOJ,OAAZ,qBACA,qBAAKb,UAAU,iBAEjB,8BACGiB,EAAOG,KAAI,SAACC,GACX,OAAO,cAAC,EAAD,2BAA0BA,GAA1B,IAAiCd,YAAaA,IAAlCc,EAAMnB,aCR7BoB,EAAW,UAFD,gCAEC,0DADD,mCACC,WAqDFC,MAnDf,WACE,MAA8Bf,oBAAS,GAAvC,mBAAOgB,EAAP,KAAgBC,EAAhB,KACA,EAA4BjB,mBAAS,IAArC,mBAAOS,EAAP,KAAeS,EAAf,KAOMC,EAAW,uCAAG,gCAAAC,EAAA,6DAClBH,GAAW,GADO,kBAGOI,MAAMP,GAHb,cAGVQ,EAHU,gBAIOA,EAASC,OAJhB,OAIVC,EAJU,OAKVf,EAASe,EAASC,QACxBR,GAAW,GACXC,EAAUT,GAPM,kDAShBQ,GAAW,GACXP,QAAQC,IAAR,MAVgB,0DAAH,qDAgBjB,OAHAe,qBAAU,WACRP,MACC,IACCH,EAEA,+BACE,cAAC,EAAD,MAIgB,IAAlBP,EAAOJ,OAEP,+BACE,sBAAKb,UAAU,QAAf,UACE,gDACA,wBAAQA,UAAU,MAAMe,QAAS,kBAAMY,KAAvC,0BAQN,+BACE,cAAC,EAAD,CAAQV,OAAQA,EAAQV,YA1CR,SAACL,GACnB,IAAMiC,EAAYlB,EAAOmB,QAAO,SAACf,GAAD,OAAWA,EAAMnB,KAAOA,KACxDwB,EAAUS,SCTdE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.64e5a84e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Loading = () => {\r\n  return (\r\n    <div className=\"loading\">\r\n      <h1>loading...</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","import React, { useState } from \"react\";\r\nconst IMGPATH = \"https://image.tmdb.org/t/p/w1280\";\r\n\r\nconst Movie = ({\r\n  id,\r\n  poster_path,\r\n  title,\r\n  vote_average,\r\n  overview,\r\n  removeMovie,\r\n}) => {\r\n  const [readMore, setReadMore] = useState(false);\r\n  return (\r\n    <article className=\"single-movie\">\r\n      <img src={IMGPATH + poster_path} alt={title} />\r\n      <footer>\r\n        <div className=\"movie-info\">\r\n          <h4>{title}</h4>\r\n          <h4 className=\"movie-vote\">{vote_average}</h4>\r\n        </div>\r\n        <p>\r\n          {overview.length > 200\r\n            ? readMore\r\n              ? overview\r\n              : `${overview.substring(0, 200)}...`\r\n            : overview}\r\n          {overview.length > 200 && (\r\n            <button onClick={() => setReadMore(!readMore)}>\r\n              {readMore ? \"show less\" : \"  read more\"}\r\n            </button>\r\n          )}\r\n        </p>\r\n        <button className=\"delete-btn\" onClick={() => removeMovie(id)}>\r\n          not interested\r\n        </button>\r\n      </footer>\r\n    </article>\r\n  );\r\n};\r\n\r\nexport default Movie;\r\n","import React from \"react\";\r\nimport Movie from \"./Movie\";\r\nconst Movies = ({ movies, removeMovie }) => {\r\n  {\r\n    console.log(movies);\r\n  }\r\n  return (\r\n    <section>\r\n      <div className=\"title\">\r\n        <h2>{movies.length} popular movies</h2>\r\n        <div className=\"underline\"></div>\r\n      </div>\r\n      <div>\r\n        {movies.map((movie) => {\r\n          return <Movie key={movie.id} {...movie} removeMovie={removeMovie} />;\r\n        })}\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Movies;\r\n","import React, { useState, useEffect } from \"react\";\nimport Loading from \"./Loading\";\nimport Movies from \"./Movies\";\n\nconst api_url = \"https://api.themoviedb.org/3/\";\nconst api_key = \"04c35731a5ee918f014970082a0088b1\";\nconst api_popular = `${api_url}discover/movie?sort_by=popularity.desc&api_key=${api_key}&page=1`;\n\nfunction App() {\n  const [loading, setLoading] = useState(true);\n  const [movies, setMovies] = useState([]);\n\n  const removeMovie = (id) => {\n    const newMovies = movies.filter((movie) => movie.id !== id);\n    setMovies(newMovies);\n  };\n\n  const fetchMovies = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(api_popular);\n      const respData = await response.json();\n      const movies = respData.results;\n      setLoading(false);\n      setMovies(movies);\n    } catch (error) {\n      setLoading(false);\n      console.log(error);\n    }\n  };\n  useEffect(() => {\n    fetchMovies();\n  }, []);\n  if (loading) {\n    return (\n      <main>\n        <Loading />\n      </main>\n    );\n  }\n  if (movies.length === 0) {\n    return (\n      <main>\n        <div className=\"title\">\n          <h2>no movies left</h2>\n          <button className=\"btn\" onClick={() => fetchMovies()}>\n            refresh\n          </button>\n        </div>\n      </main>\n    );\n  }\n  return (\n    <main>\n      <Movies movies={movies} removeMovie={removeMovie} />\n    </main>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}